{"version":3,"sources":["selectors/selectFields.js","services/hnApi.js","styles/StoryStyles.js","components/Story.js","mappers/mapTime.js","styles/StoriesContainerStyles.js","hooks/useInfiniteScroll.js","constants/index.js","utils/debounce.js","containers/StoriesContainer.js","App.js","serviceWorker.js","index.js"],"names":["selectFields","id","by","url","time","title","baseUrl","newStoriesUrl","storyUrl","getStory","storyId","a","axios","get","then","data","result","getStoryIds","StoryWrapper","styled","section","StoryTitle","h1","StoryMeta","div","StoryMetaElement","span","props","color","Story","useState","story","setStory","useEffect","data-testid","href","timestamp","seconds","Math","floor","Date","interval","mapTime","GlobalStyle","createGlobalStyle","StoriesContainerWrapper","main","useInfiniteScroll","loading","setLoading","count","setCount","handleScroll","func","wait","immediate","args","timeout","callNow","clearTimeout","setTimeout","apply","debounce","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener","StoriesContainer","storyIds","setStoryIds","slice","map","key","App","Boolean","location","hostname","match","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fa20f687.chunk.js","sourcesContent":["export const selectFields = ({ id, by, url, time, title } = {}) => ({\n  id,\n  by,\n  url,\n  time,\n  title,\n});\n","import axios from 'axios';\nimport { selectFields } from '../selectors/selectFields';\n\nexport const baseUrl = `https://hacker-news.firebaseio.com/v0/`;\nexport const newStoriesUrl = `${baseUrl}newstories.json`;\nexport const storyUrl = `${baseUrl}item/`;\n\nexport const getStory = async (storyId) => {\n  const result = await axios\n    .get(`${storyUrl + storyId}.json`)\n    .then(({ data }) => data && selectFields(data));\n\n  return result;\n};\n\nexport const getStoryIds = async () => {\n  const result = await axios.get(newStoriesUrl).then(({ data }) => data);\n\n  return result;\n};\n","import styled from 'styled-components';\n\nexport const StoryWrapper = styled.section`\n  padding-top: 10px;\n  margin-bottom: 20px;\n  border-top: 1px solid #ccc;\n\n  &:first-of-type {\n    border-top: 0;\n  }\n\n  &:last-of-type {\n    margin-bottom: 0;\n    padding-bottom: 0;\n  }\n`;\n\nexport const StoryTitle = styled.h1`\n  margin-bottom: 5px;\n  font-size: 18px;\n  line-height: 1.8;\n  margin: 0;\n  text-text-decoration: none;\n\n  a {\n    color: #2e2e2e;\n    background-color: #f8dc3d;\n    text-text-decoration: none;\n  }\n`;\n\nexport const StoryMeta = styled.div`\n  font-style: italic;\n\n  > span(:first-child) {\n    margin-right: 10px;\n  }\n\n  > span:not(:first-child):before {\n    content: 'ðŸ‘»';\n    margin: 0 7px;\n  }\n\n  .story__meta-bold {\n    font-weight: bold;\n  }\n`;\n\nexport const StoryMetaElement = styled.span`\n  font-weight: bold;\n  color: ${(props) => props.color || 'red'};\n`;\n","import React, { useState, useEffect, memo } from 'react';\nimport { getStory } from '../services/hnApi';\nimport {\n  StoryWrapper,\n  StoryTitle,\n  StoryMeta,\n  StoryMetaElement,\n} from '../styles/StoryStyles';\nimport { mapTime } from '../mappers/mapTime';\n\nexport const Story = ({ storyId }) => {\n  const [story, setStory] = useState({});\n\n  useEffect(() => {\n    getStory(storyId).then((data) => data && data.url && setStory(data));\n  }, []);\n\n  return story && story.url ? (\n    <StoryWrapper data-testid=\"story\">\n      <StoryTitle>\n        <a href={story.url}>{story.title}</a>\n      </StoryTitle>\n      <StoryMeta>\n        <span data-testid=\"story-by\">\n          <StoryMetaElement color=\"#000\">By:</StoryMetaElement> {story.by}\n        </span>\n        <span data-testid=\"story-time\">\n          <StoryMetaElement color=\"#000\">By:</StoryMetaElement>{' '}\n          {mapTime(story.time)}\n        </span>\n      </StoryMeta>\n    </StoryWrapper>\n  ) : null;\n};\n","export const mapTime = (timestamp) => {\n  const seconds = Math.floor((new Date() - timestamp * 1000) / 1000);\n\n  let interval = Math.floor(seconds / 31536000);\n\n  if (interval > 1) {\n    return `${interval} years`;\n  }\n  interval = Math.floor(seconds / 2592000);\n\n  if (interval > 1) {\n    return `${interval} months`;\n  }\n  interval = Math.floor(seconds / 86400);\n\n  if (interval > 1) {\n    return `${interval} days`;\n  }\n  interval = Math.floor(seconds / 3600);\n\n  if (interval > 1) {\n    return `${interval} hours`;\n  }\n  interval = Math.floor(seconds / 60);\n\n  if (interval > 1) {\n    return `${interval} minutes`;\n  }\n\n  return `${Math.floor(seconds)} seconds`;\n};\n","import styled, { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n  }\n  *, *:before, *:after {\n    -webkit-box-sizing: inherit;\n            box-sizing: inherit;\n  }\n  body {\n    margin: 0;\n    padding: 0;\n    line-height: 1;\n    color: #202020;\n    background-color: #fafafe;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 16px;\n  }\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nexport const StoriesContainerWrapper = styled.main`\n  max-width: 1140px;\n  padding: 20px 15px;\n  margin: auto;\n`;\n","import { useState, useEffect } from 'react';\nimport { STORY_INCREMENT, MAX_STORIES } from '../constants';\nimport { debounce } from '../utils/debounce';\n\nexport const useInfiniteScroll = () => {\n  const [loading, setLoading] = useState(false);\n  const [count, setCount] = useState(STORY_INCREMENT);\n\n  const handleScroll = debounce(() => {\n    if (\n      window.innerHeight + document.documentElement.scrollTop !==\n        document.documentElement.offsetHeight ||\n      loading\n    ) {\n      return false;\n    }\n\n    setLoading(true);\n  }, 200);\n\n  useEffect(() => {\n    if (!loading) return;\n\n    if (count + STORY_INCREMENT >= MAX_STORIES) {\n      setCount(MAX_STORIES);\n    } else {\n      setCount(count + STORY_INCREMENT);\n    }\n\n    setLoading(false);\n  }, [loading]);\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  return { count };\n};\n","export const MAX_STORIES = 500;\nexport const STORY_INCREMENT = 30;\n","export const debounce = (func, wait, immediate, args) => {\n  let timeout;\n\n  return () => {\n    const context = this;\n    const callNow = immediate && !timeout;\n    const later = () => {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n\n    if (callNow) func.apply(context, args);\n  };\n};\n","import React, { useState, useEffect } from 'react';\nimport { getStoryIds } from '../services/hnApi';\nimport { Story } from '../components/Story';\nimport {\n  GlobalStyle,\n  StoriesContainerWrapper,\n} from '../styles/StoriesContainerStyles';\nimport { useInfiniteScroll } from '../hooks/useInfiniteScroll';\n\nexport const StoriesContainer = () => {\n  const { count } = useInfiniteScroll();\n  const [storyIds, setStoryIds] = useState([]);\n\n  useEffect(() => {\n    getStoryIds().then((data) => setStoryIds(data));\n  }, []);\n\n  return (\n    <>\n      <GlobalStyle />\n      <StoriesContainerWrapper data-testid=\"stories-container\">\n        <h1>Hacker News Stories</h1>\n        {storyIds.slice(0, count).map((storyId) => (\n          <Story storyId={storyId} key={storyId} />\n        ))}\n      </StoriesContainerWrapper>\n    </>\n  );\n};\n","import React from 'react';\nimport { StoriesContainer } from './containers/StoriesContainer';\n\nexport const App = () => {\n  return <StoriesContainer />;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}